<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | dave^2 = -1]]></title>
  <link href="http://davesquared.net/categories/git/atom.xml" rel="self"/>
  <link href="http://davesquared.net/"/>
  <updated>2022-10-15T16:55:10+11:00</updated>
  <id>http://davesquared.net/</id>
  <author>
    <name><![CDATA[David Tchepak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git tidbit: Comparing different paths across branches or commits]]></title>
    <link href="http://davesquared.net/2015/04/git-compare-different-paths-across-branches.html"/>
    <updated>2015-04-22T11:25:00+10:00</updated>
    <id>http://davesquared.net/2015/04/git-compare-different-paths-across-branches</id>
    <content type="html"><![CDATA[<p>Today I updated a library version in a project, which changed the path from <code>packages/FSharp.Formatting.CommandTool-2.8.0</code> to <code>packages/FSharpFormatting.CommandTool-2.9.1</code>. We'd also taken our own copies of some templates in the package, and I wanted to check if there were any differences between <code>-2.8.0\templates</code> and <code>-2.9.1\templates</code> that I should port across.</p>

<p>Rather than my usual fumbling about (check out both, copy, diff) I thought I'd try to learn the necessary Git incantation to compare the paths. And then blog it, so that when I forget I'll have a quick reference handy for next time. :)</p>

<!-- more -->


<p>I ended up <a href="http://stackoverflow.com/a/8131164/906">using <code>git diff</code> with the <code>COMMIT:PATH</code> format</a>, using <code>HEAD</code> and <code>HEAD~1</code> as the commit references (shown split over multiple lines):</p>

<pre><code>git diff --ignore-space-change \
    HEAD:source/packages/FSharp.Formatting.CommandTool.2.9.1/templates \
    HEAD~1:source/packages/FSharp.Formatting.CommandTool.2.8.0/templates/
</code></pre>

<p>To get a summary of the files changes instead (in this case, to confirm nothing changed), use the <code>--stat</code> option:</p>

<pre><code>% git diff --stat --ignore-space-change HEAD:source/packages/FSharp.Formatting.CommandTool.2.9.1/templates HEAD~1:source/packages/FSharp.Formatting.CommandTool.2.8.0/templates
 docpage.cshtml                | 0
 reference/module.cshtml       | 0
 reference/namespaces.cshtml   | 0
 reference/part-members.cshtml | 0
 reference/part-nested.cshtml  | 0
 reference/type.cshtml         | 0
 template.cshtml               | 0
 7 files changed, 0 insertions(+), 0 deletions(-)
</code></pre>

<p>I was pretty impressed that Git's Bash prompt on Windows gave me autocompletion on the <code>HEAD~1:/...2.8.0/</code> path despite the path no longer being in the working directory.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Odd problem with Git, Windows and virus-checkers]]></title>
    <link href="http://davesquared.net/2011/10/odd-problem-with-git-windows-and-virus.html"/>
    <updated>2011-10-22T22:19:00+11:00</updated>
    <id>http://davesquared.net/2011/10/odd-problem-with-git-windows-and-virus</id>
    <content type="html"><![CDATA[<p>Had a really odd git problem this week, with an even odder solution, so am posting in the hope of helping the next poor dev who has to try and track this down via Google.</p>




<p>We had a branch checked out with 2 new commits on it, and we wanted to squash it into a single commit using <code>git rebase -i (basecommit)</code>. This would start the normal interactive rebase, then get into a loop of printing the following error to console:</p>




<pre><code>mv: cannot move '.git/rebase-merge/git-rebase-todo.new' to '.git/rebase-merge/git-rebase.todo'
</code></pre>




<p>Looking at the <code>.git/rebase-merge</code> folder, I could see the <code>git-rebase-todo.new</code> file getting repeatedly created, then deleted. This was happening on two different machines.</p>




<p>Some googling lead me to <a href="http://osdir.com/ml/msysgit/2010-01/msg00007.html">this post</a> which suggested a virus checker may be locking the file.</p>




<p>Sure enough, turning off Microsoft Security Essentials' Real-time protection, doing the rebase, then turning it back on again, resolved the problem. I've never had this problem before so must have just gotten "lucky" with this particular file matching some property the virus checker was looking for.</p>




<p>I guess this is probably worth trying whenever getting strange file IO errors from any software ported to Windows.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git pre-commit hook to help with multiple identities]]></title>
    <link href="http://davesquared.net/2010/11/git-pre-commit-hook-to-help-with.html"/>
    <updated>2010-11-10T15:57:00+11:00</updated>
    <id>http://davesquared.net/2010/11/git-pre-commit-hook-to-help-with</id>
    <content type="html"><![CDATA[<p>I use git both at work and for personal projects. Unfortunately I always forget to properly set my <code>user.email</code> and <code>user.name</code> for new work repositories, and so I end up committing under my personal email address. No big deal, but not exactly brilliant either.</p>




<p>When this happened again recently I decided it would be the last time. Enter <a href="http://www.kernel.org/pub/software/scm/git/docs/githooks.html">Git hooks</a>. By using a pre-commit hook I now make sure I never commit to a repo with a mycompany.com remote unless the configured user email address is a mycompany.com address.</p>




<p><b>Update 2016-03-20:</b> Updated to also catch the case of committing under a company email address without a mycompany.com remote.</p>




<pre class="brush:ruby">
#!/usr/bin/env ruby

# Make sure that users with a MyCompany email address can only commit to
# repositories that contain a MyCompany remote.

useremail=`git config user.email`
remotes=`git remote -v`

if remotes.match(/mycompany\.com/) and not useremail.match(/mycompany\.com/) then
    puts "Pre-commit error: #{useremail.strip} is not a MyCompany email address "
    puts "but this repository has MyCompany remotes."
    puts
    exit 1
elsif useremail.match(/mycompany\.com/) and not remotes.match(/mycompany\.com/) then
    puts "Pre-commit error: MyCompany email address used for repository with no MyCompany remotes."
    puts "Remotes:"
    puts (remotes.strip)
    puts
    exit 1
end

</pre>




<p>This code goes in a <code>pre-commit</code> file in your repo's <code>.git/hooks</code> directory, or in your Git templates directory to apply to all future repos (<code>C:\Program Files (x86)\Git\share\git-core\templates\hooks</code> on my machine. You can apply it to existing repos by re-calling <code>git init</code> which will re-copy the templates). The file needs to be executable (which it is if you're running Windows :)), and you'll obviously need Ruby for this specific example.</p>




<p>For more information and some much more impressive examples of Git hooks, have a look at Glenn Gillen's post on <a href="http://rubypond.com/blog/slaying-dragons-git-bash-ruby">Slaying dragons with git, bash and ruby</a>.</p>




<p><b>Update 2011-06-15:</b> Found a StackOverflow answer with a nice way of <a href="http://stackoverflow.com/a/8842663/906">setting a per-user template directory for hooks</a> using <a href="https://git-scm.com/docs/git-init#_template_directory"><code>init.templatedir</code></a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An easier way to set up diff and merge tools for Git on Windows]]></title>
    <link href="http://davesquared.net/2010/03/easier-way-to-set-up-diff-and-merge.html"/>
    <updated>2010-03-26T10:33:00+11:00</updated>
    <id>http://davesquared.net/2010/03/easier-way-to-set-up-diff-and-merge</id>
    <content type="html"><![CDATA[<p>I've noticed a fair number of people are looking at my older posts on <a href="http://davesquared.net/2009/02/setting-up-diff-and-merge-tools-for-git.html">setting up diff and merge tools</a> and the update on <a href="http://davesquared.net/2009/05/setting-up-git-difftool-on-windows.html">configuring git difftool</a>. These posts cover how to write wrapper scripts around your diff and merge tool of choice (I was using <a href="http://www.sourcegear.com/diffmerge/">DiffMerge</a> at the time) and get Git to use them.</p>




<p>I'm not doing this any more, opting for a much simpler method. I thought I'd share it in the event you just want to get something up and running as fast as possible, and that you aren't too particular about which diff tool you use.</p>




<p>First step, install <a href="http://kdiff3.sourceforge.net/">KDiff3</a>. It's not the prettiest GUI in the world, but once you get used to it it is quite usable and has the added advantage of working quite naturally with Git without having to configure much.</p>




<p>Second step, open your <code>.gitconfig</code> (in your home directory, <code>C:\Users\(username)</code>, or down ye olde Documents and Settings path), and add the following:</p>




<pre>
[diff]
    tool = kdiff3

[merge]
    tool = kdiff3

[mergetool &quot;kdiff3&quot;]
    path = C:/Program Files/KDiff3/kdiff3.exe
    keepBackup = false
    trustExitCode = false
</pre>




<p>Now all calls to <code>git difftool</code> and <code>git mergetool</code> should default to KDiff3. That's all you need to be good to go! Much simpler than bothering with all those wrappers. Hope this helps! :)</p>




<div><img src="http://davesquared.net/images/fromblogger/s800-works-on-my-machine-starburst.png" /></div>




<p><i>Certified as <a href="http://www.codinghorror.com/blog/archives/000818.html">working on my machine</a>, running Git 1.7.0.2 (msysgit).</i></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keeping a change out of our master repository with Git]]></title>
    <link href="http://davesquared.net/2009/10/keeping-change-out-of-our-master.html"/>
    <updated>2009-10-30T17:23:00+11:00</updated>
    <id>http://davesquared.net/2009/10/keeping-change-out-of-our-master</id>
    <content type="html"><![CDATA[<p>I love Git. I can't believe I ever loved another version control system. Recently I've started using Git branches to keep one particular lot of changes out of my master repository. I wanted to upgrade my current VS solution and projects to VS 2010 Beta 2, use VS 2010 to add features to the code base, then only check in the non-VS 2010 related changes. That way my fellow developers don't have to worry about the slightly different <code>.csproj</code> files and we can all work together happily. :)</p>




<p>Now the changes made by the VS2010 upgrade wizard are very minor -- basically just updating the <code>ToolsVersion</code> attribute to 4.0 and providing a fallback <code>OldToolsVersion</code> element set to 3.5.</p>




<p>So here's what I did. The first step was to create a branch off my master using <code>git checkout -b vs_upgrade</code>. I then ran the VS 2010 upgrade wizard which changed the relevant files, then commited those to my <code>vs_upgrade</code> branch. Second step was to create a branch off my <code>vs_upgrade</code> branch to add my feature (not strictly necessary, but keeps things nicely separated). I can now happily make changes to the code and commit the new feature to my feature branch.  The structure now looks something like this:</p>




<div class="separator" style="clear: both; text-align: center;">
<a href="http://davesquared.net/images/fromblogger/s1600-h-git_vs2010_upgrade.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://davesquared.net/images/fromblogger/s320-git_vs2010_upgrade.png" /></a>
</div>




<p>Now I need to get my feature back into my <code>master</code> branch, minus the VS 2010 upgrade. We can just cherry pick the change we want (I use <code>gitk --all</code> rather than the command line) and apply it to the <code>master</code> branch. Now we can push <code>master</code> to our remote server and everyone has the change, minus the VS 2010 bits. Very cool!</p>




<div class="separator" style="clear: both; text-align: center;">
<a href="http://davesquared.net/images/fromblogger/s1600-h-git_merge_without_vs2010.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://davesquared.net/images/fromblogger/s320-git_merge_without_vs2010.png" /></a><br /></div>




<p>We can rebase our <code>vs_upgrade</code> branch whenever some new changes are applied by other developers to <code>master</code>, and we get back to our first picture. We always have just a single commit containing our VS-related changes (so we don't have to repeat the upgrade), and we can always just cherry pick the changes we want made on top of the upgrade and apply them to our master. I get to play with VS 2010 and the nightly builds of ReSharper 5.0, without having any effect whatsoever on my team mates using VS 2008. The ease with which Git handles this branching and any merging is just awesome! :)</p>

]]></content>
  </entry>
  
</feed>
