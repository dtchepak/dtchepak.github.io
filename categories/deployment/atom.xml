<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: deployment | dave^2 = -1]]></title>
  <link href="http://davesquared.net/categories/deployment/atom.xml" rel="self"/>
  <link href="http://davesquared.net/"/>
  <updated>2022-10-15T16:55:10+11:00</updated>
  <id>http://davesquared.net/</id>
  <author>
    <name><![CDATA[David Tchepak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Plans for IIS 7.0 web app deployment framework]]></title>
    <link href="http://davesquared.net/2007/11/plans-for-iis-70-web-app-deployment.html"/>
    <updated>2007-11-30T10:09:00+11:00</updated>
    <id>http://davesquared.net/2007/11/plans-for-iis-70-web-app-deployment</id>
    <content type="html"><![CDATA[<p>Just reading through ScottGu's <a href="http://weblogs.asp.net/scottgu/archive/2007/11/29/net-web-product-roadmap-asp-net-silverlight-iis7.aspx">.NET Web Product Roadmap</a> and noticed this (emphasis mine):</p>


<p> <blockquote> <p>"We will also shortly begin sharing details of a new web application deployment framework for IIS that enables you to <strong>easily automate the deployment of web applications</strong> on either a single server or across a web farm of machines.&nbsp; It will make it easy to <strong>version your web applications</strong> (including allowing you to quickly <strong>roll back to previous versions</strong>), as well as automatically provision them across multiple servers.&nbsp; It also enables the <strong>full automation of deployment tasks</strong> (including via both command-line and PowerShell scripting APIs)."</p></blockquote> <p>This sounds like much more fun that <a href="http://davesquared.net/2007/08/example-of-deploying-web-apps-using.html">other</a> <a href="http://davesquared.net/2007/08/example-of-deploying-web-apps-using-wix.html">approaches</a> I have tried.</p> <p>ScottGu also mentions that the first public preview of ASP.NET 3.5 Extensions (including ASP.NET MVC) will be released next week! Woohoo! More toys!&nbsp;:-)</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Example of deploying web apps using WiX]]></title>
    <link href="http://davesquared.net/2007/08/example-of-deploying-web-apps-using-wix.html"/>
    <updated>2007-08-22T15:22:00+10:00</updated>
    <id>http://davesquared.net/2007/08/example-of-deploying-web-apps-using-wix</id>
    <content type="html"><![CDATA[<p>As a follow up to my recent post on <a href="http://davesquared.net/2007/08/example-of-deploying-web-apps-using.html">deploying web applications via MSBuild</a>, I wanted to see how tough it was to do the same thing using a&nbsp;<a href="http://davesquared.net/2007/08/automating-releases-with-wix-and.html">WiX</a>-built installation package. My basic aim is to deploy a simple web applications to localhost, including configuring and IIS virtual directories and application. I am going to assume that the web application has already been compiled to a directory called PrecompiledWeb (which is the default when building via MSBuild). I am using the development build of <a href="http://sourceforge.net/projects/wix/">WiX 3.0</a> (3.0.2925.0).</p>


<p> <p>The first step was creating a new WiX Setup project in my VS 2005 solution (this VS integration package is called <a href="http://wix.sourceforge.net/votive.html">Votive</a>). This creates a .wixproj file, which stores the information necessary to build your installation package.&nbsp;As of WiX 3.0 it can be built using MSBuild.&nbsp;</p> <p>To this project I added references to WixIIsExtension.dll (found in C:\Program Files\Windows Installer XML v3\bin\ in my case). This is to get access to some of the IIS-related actions. The WixUtilExtension.dll is also useful for creating users (amongst other things). To get these extensions to work properly I had to work around a bug in the current build that causes the Cultures property to set incorrectly in the .wixproj file. Search for "bug" on <a href="http://blog.wharton.com.au/2007/06/windows-installer-xml-wix-30-snippets.html">Jeff Wharton's post</a> for information on this. It basically just means manually setting the culture nodes to "en-US" or your current project's culture.</p> <p>Next I edited the default .wxs file created by Votive (or create a new one using Add --&gt; New Item&nbsp;--&gt; WiX Product File).</p><pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Wix xmlns="http://schemas.microsoft.com/wix/2006/wi"
     xmlns:iis="http://schemas.microsoft.com/wix/IIsExtension"&gt;
  &lt;Product Id="(your guid0 here)" Name="Sample"
           Language="1033" Version="1.0.0.0" Manufacturer="Me"
           UpgradeCode="(your guid1 here)"&gt;
    &lt;Package InstallerVersion="200" Compressed="yes" /&gt;
    &lt;Media Id="1" Cabinet="WixSample.cab" EmbedCab="yes" /&gt;
    &lt;iis:WebSite Id='DefaultWebSite' Description='Default Web Site'&gt;
      &lt;iis:WebAddress Id='AllUnassigned' Port='80' /&gt;
    &lt;/iis:WebSite&gt;
    &lt;Directory Id="TARGETDIR" Name="SourceDir"&gt;
      &lt;Directory Id="INSTALLDIR" Name="Sample"&gt;
        &lt;Directory Id="MyWebSiteDir" Name="MyWebSite" /&gt;      <br/>
      &lt;/Directory&gt;
    &lt;/Directory&gt;
    &lt;Feature Id="SampleFeature" Title="Sample" Level="1"&gt;
      &lt;ComponentGroupRef Id="MyWebSite" /&gt;         <br/>
    &lt;/Feature&gt;
  &lt;/Product&gt;
&lt;/Wix&gt;
</pre></p>

<p>This file sets up the basic install package structure. The iis:WebSite node is there just to provide a reference to the default web site on localhost. The Directory tags define the directory structure that will be created by the installer. In this case, it is just going to going to create a structure like C:\Sample\MyWebSite. The Feature tag defines exactly which Component we are installing. In this case we are installing the group of Components called MyWebSite. We have not defined these yet, so lets add another .wks file to do this now (Add --&gt; New Item --&gt; WiX File).</p>


<pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Wix xmlns="http://schemas.microsoft.com/wix/2006/wi"
     xmlns:iis="http://schemas.microsoft.com/wix/IIsExtension"&gt;
  &lt;Fragment&gt;
    &lt;ComponentGroup Id="MyWebSite"&gt;
      &lt;ComponentRef Id="MyWebSiteRoot" /&gt;
      &lt;ComponentRef Id="MyWebSiteBin" /&gt;
      &lt;ComponentRef Id="MyWebSiteVirtualDir" /&gt;
    &lt;/ComponentGroup&gt;
    &lt;DirectoryRef Id="MyWebSiteDir" FileSource="$(var.SolutionDir)\PrecompiledWeb\Sample.MyWebSite"&gt;
      &lt;Component Id="MyWebSiteRoot" Guid="(your guid here)"&gt;
        &lt;File Id="Default" Name="Default.aspx" /&gt;
        &lt;File Id="Web.Config" Name="Web.Config" /&gt;
        &lt;File Id="PrecompiledApp.Config" Name="PrecompiledApp.config" /&gt;        
      &lt;/Component&gt;
      &lt;Directory Id="MyWebSiteDir_Bin" Name="bin" FileSource="$(var.SolutionDir)\PrecompiledWeb\Sample.MyWebSite\bin"&gt;
        &lt;Component Id="MyWebSiteBin" Guid="(your guid here)"&gt;
          &lt;File Id="App_Web_gmetwu2v.dll" Name="App_Web_gmetwu2v.dll" /&gt;
          &lt;File Id="App_Web_gmetwu2v.pdb" Name="App_Web_gmetwu2v.pdb"/&gt;
        &lt;/Component&gt;
      &lt;/Directory&gt;
      &lt;Component Id="MyWebSiteVirtualDir" Guid="(your guid here)"&gt;
        &lt;CreateFolder /&gt;
        &lt;iis:WebVirtualDir Id='MyWebSiteVirtualDir' Alias='MyWebSite' Directory='MyWebSiteDir'
                           WebSite='DefaultWebSite'&gt;
          &lt;iis:WebApplication Id='MyWebSiteApp' Name='MyWebSiteApp' Isolation='medium' /&gt;
        &lt;/iis:WebVirtualDir&gt;
      &lt;/Component&gt;
    &lt;/DirectoryRef&gt;
  &lt;/Fragment&gt; 
&lt;/Wix&gt;
</pre>


<p>This file explicitly lists every web site file that is going to be distributed within our installer. The reason why I have done this in a separate .wks&nbsp;file is because it is a giant PITA to do this, especially for large web sites, and double especially as the App_Web_*.dll file name will change on every build, so ideally you would automate the creation of this file as part of the initial project build. WiX 3.0 comes with the <a href="http://www.wixwiki.com/index.php?title=Heat">Heat utility</a>&nbsp;(formerly Tallow) that is meant to help with this.</p>


<p>Other than the file definitions, you will also see the node that will create the IIS web virtual directory and application. You can also do neat things like configure application pools at this step. You'll notice the WebSite attribute of the iis:WebVirtualDir node is "DefaultWebSite", which was the ID of the iis:WebSite node in our&nbsp;first file, so this virtual directory will be hosted from our default IIS website on localhost. </p>


<p>You can now build your .wixproj from VS, and you should end up with an installer.&nbsp;After running the installer, you should have the sample application available&nbsp;at http://localhost/MyWebSite (with source files at C:\Sample\MyWebSite). Uninstalling should remove the files and IIS configuration entirely.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Example of deploying web apps using MSBuild]]></title>
    <link href="http://davesquared.net/2007/08/example-of-deploying-web-apps-using.html"/>
    <updated>2007-08-21T10:35:00+10:00</updated>
    <id>http://davesquared.net/2007/08/example-of-deploying-web-apps-using</id>
    <content type="html"><![CDATA[<p>Here is a sample MSBuild script that will deploy two web apps from Sample.sln to localhost. It is very nasty, but worked ok for me.</p>


<p> <p>First, we create our XML .build file and&nbsp;import <a href="http://davesquared.net/2007/08/msbuild-task-library-links.html">SDCTasks</a> for our IIS operations. The remaining code snippets go in the &lt;Project /&gt; node.</p><pre>&lt;Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&gt;
  &lt;Import Project="$(MSBuildExtensionsPath)\SDCTasks\Microsoft.Sdc.Common.tasks"/&gt;
  ...
&lt;/Project&gt;</pre></p>

<p>Next we declare and define a DeploymentPath, and also set the solution file (SLN) we are going to be building. I have then defined two WebProject items. This is used for <a href="http://www.sedodream.com/PermaLink,guid,5f1e0445-ce3d-4052-ba80-42fd19512d42.aspx">batching</a>, which is the MSBuild way of repeating a single task with different inputs each time. Each WebProject item includes the name of the IIS web that will be created, as well as the SourceFolder that contains the ASPX files and web /bin after building the SLN (which by default builds to a PrecompiledWeb directory). All these variable names are arbitrary -- the only&nbsp;native MSBuild&nbsp;nodes are PropertyGroup and&nbsp;ItemGroup.</p>


<pre>  &lt;PropertyGroup&gt;
    &lt;DeploymentPath&gt;C:\InetPub\wwwroot&lt;/DeploymentPath&gt;    
  &lt;/PropertyGroup&gt;
  &lt;ItemGroup&gt;
    &lt;ProjectReferences Include="Sample.sln" /&gt;
  &lt;/ItemGroup&gt;
  &lt;ItemGroup&gt;
    &lt;WebProject Include="MyWebService"&gt;
      &lt;WebName&gt;Sample_MyWebService&lt;/WebName&gt;
      &lt;SourceFolder&gt;$(MSBuildProjectDirectory)\PrecompiledWeb\Sample.MyWebService&lt;/SourceFolder&gt;      
    &lt;/WebProject&gt;
    &lt;WebProject Include="MyWebSite"&gt;
      &lt;WebName&gt;Sample_MyWebSite&lt;/WebName&gt;
     &lt;SourceFolder&gt;$(MSBuildProjectDirectory)\PrecompiledWeb\Sample.MyWebSite&lt;/SourceFolder&gt;      
    &lt;/WebProject&gt;
  &lt;/ItemGroup&gt;
</pre>


<p>The next step is defining the build target. This delegates the build/compilation step to msbuild itself (rather than explicitly calling the CSC compiler which can also be done), by calling msbuild on the SLN file we defined in the ProjectReferences variable.</p>


<pre>  &lt;Target Name="Build"&gt;
    &lt;MSBuild Projects="@(ProjectReferences)" Targets="Build" /&gt;
  &lt;/Target&gt;</pre>


<p>Next we have the deployment step. This replaces the web.config in the compiled app with a web.config.local file we have (so you can change configuration for deployment), does a basic file copy to move the files to the deployment path, then creates a virtual directory and web application at the deployment path to allow the ASPX files to execute. </p>


<pre>  &lt;Target Name="Deploy"&gt;
    &lt;!-- Replace web configs in build directory with deployment configuration --&gt;
    &lt;Delete Files="%(WebProject.SourceFolder)\Web.Config" /&gt;
    &lt;Copy
      SourceFiles="%(WebProject.SourceFolder)\Web.Config.local"
      DestinationFiles="%(WebProject.SourceFolder)\Web.Config" /&gt;
    &lt;!-- Copy webs from build to deployment--&gt;
    &lt;Folder.Copy
    Source="%(WebProject.SourceFolder)"
    Destination="$(DeploymentPath)\%(WebProject.WebName)" /&gt;
    &lt;!-- Create Webs on Localhost --&gt;
    &lt;Web.WebSite.CreateVirtualDirectory
        VirtualDirectoryName="%(WebProject.WebName)"
        Path="$(DeploymentPath)\%(WebProject.WebName)"
        AppCreate="true" /&gt;
  &lt;/Target&gt;
</pre>


<p>Note the %(WebProject.property) style references. These are the batches I mentioned earlier, which means that tasks containing %(..) within attributes will repeat for each WebProject ItemGroup defined. This just saves us from duplicating the Folder.Copy task for each web in the SLN (for example), which can be helpful if you are deploying several web applications in the one deployment step.</p>


<p>For good measure we can also clean up after ourselves.</p>


<pre>  &lt;Target Name="Clean"&gt;
    &lt;Web.WebSite.DeleteVirtualDirectory VirtualDirectoryName="%(WebProject.WebName)" /&gt;
    &lt;RemoveDir Directories="$(DeploymentPath)\%(WebProject.WebName)" /&gt;
    &lt;RemoveDir Directories="$(MSBuildProjectDirectory)\PrecompiledWeb" /&gt;
  &lt;/Target&gt;
</pre>


<p>You can execute this from the command prompt:</p>


<pre>msbuild sample.build /target:clean,build,deploy</pre>


<p>This was mainly done for a proof-of-concept, and after running it I had my two web apps deployed and running on localhost as expected (er, hoped). You can obviously do a lot more useful stuff than this, like checking out from source control first, creating remote webs, virtual directories and application pools, running unit tests, and varying deployment options based on command line arguments. The main drawback of this approach is that you do not get a nice, self-contained package/installer for the deployment, and as such you will need direct network access to the deployment server as well as the relevant permissions.</p>


<p>Now to try similar stuff using <a href="http://davesquared.net/2007/08/automating-releases-with-wix-and.html">WiX</a>...</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automating releases with WiX and MSBuild]]></title>
    <link href="http://davesquared.net/2007/08/automating-releases-with-wix-and.html"/>
    <updated>2007-08-17T14:47:00+10:00</updated>
    <id>http://davesquared.net/2007/08/automating-releases-with-wix-and</id>
    <content type="html"><![CDATA[<p><a href="http://www.sedodream.com/default.aspx">Sayed Ibrahim Hashimi</a> has a <a href="http://www.tramontana.co.hu/wix/">comprehensive article</a> (and sample script) on automating the creation of installation packages using MSBuild and the&nbsp;<a href="http://wix.sourceforge.net/">Windows Installer XML toolkit</a>, or WiX. WiX is Microsoft's toolset for building Windows install packages, released under an open source licence. Microsoft used WiX to develop the Office 2007 installer. </p>


<p> <p>Relevant links:</p> <ul> <li>Sayed's article: <a href="http://msdn.microsoft.com/msdnmag/issues/07/03/WixTricks/">WiX Tricks: Automate Releases With MSBuild And Windows Installer XML -- MSDN Magazine, March 2007</a>  <li><a href="http://wix.sourceforge.net/">WiX homepage</a>&nbsp;on SourceForge  <li>A <a href="http://www.tramontana.co.hu/wix/">WiX tutorial</a>  <li>Jeff Wharton has some <a href="http://blog.wharton.com.au/2007/06/windows-installer-xml-wix-30-snippets.html">WiX snippets to configure IIS</a> from your installation package.  <li><a href="http://msdn2.microsoft.com/en-us/library/aa372860.aspx">Windows Installer Reference</a> on MSDN  <li>Tutorial on using <a href="http://msdn2.microsoft.com/en-us/library/Aa302186.aspx">WiX and Votive</a> (VS integration) on MSDN, including a handy list of Votive preprocessor variables.</li></ul></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Deployment Projects]]></title>
    <link href="http://davesquared.net/2007/08/web-deployment-projects.html"/>
    <updated>2007-08-16T13:39:00+10:00</updated>
    <id>http://davesquared.net/2007/08/web-deployment-projects</id>
    <content type="html"><![CDATA[<p>In recent travels searching for <a href="http://davesquared.net/2007/08/msbuild-task-library-links.html">deployment options using MSBuild</a>, I have come across Microsoft's&nbsp;<a href="http://go.microsoft.com/fwlink/?LinkId=55111">Web Deployment Projects</a> (WDP) add-on. This has been around forever (well, since 2005), but at the time it was released my work didn't have much need for it.</p>


<p> <p>WDP&nbsp;consists of a new utility (aspnet_merge.exe), some MSBuild tasks (Microsoft.WebDeployment.targets and DLL) and an add-in to VS 2005 that allows you to create a deployment project file from the VS 2005 UI. It does not actually require VS 2005&nbsp;to be installed, so you can also install it on a build server.</p> <p>Adding a Web Deployment Project to your solution simply creates an MSBuild project file (using the new WebDeployment tasks), so you can use it to complement existing MSBuild functionality you might have (such as scripts using <a href="http://davesquared.net/2007/08/msbuild-task-library-links.html">SDC Tasks</a>). Some of the options WDP gives you include compiling to a single or multiple&nbsp;assemblies, modifying web.config elements based on target configuration, creating IIS virtual directories for the output folder, pre- and post-build targets for customisation of the build process, and the ability to prevent the compiled web site from being updateable (no source-ASPX distributed to the server). Even if you do not use the VS add-in part of WDP, you can still get benefits from using the included MSBuild tasks as part of your normal build scripts.</p> <p>MSDN has&nbsp;a good <a href="http://msdn2.microsoft.com/en-us/library/aa479568.aspx">introductory article on using WDP</a>. There is also a <a href="http://forums.asp.net/1020.aspx">forum hosted at the official ASP.NET site</a>. ScottGu also has a <a href="http://weblogs.asp.net/scottgu/archive/2005/11/06/429723.aspx">nice post</a> about it.</p></p>
]]></content>
  </entry>
  
</feed>
