<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: roundup | dave^2 = -1]]></title>
  <link href="http://davesquared.net/categories/roundup/atom.xml" rel="self"/>
  <link href="http://davesquared.net/"/>
  <updated>2022-10-15T16:55:10+11:00</updated>
  <id>http://davesquared.net/</id>
  <author>
    <name><![CDATA[David Tchepak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Top-down vs. bottom-up design]]></title>
    <link href="http://davesquared.net/2008/05/top-down-vs-bottom-up-design.html"/>
    <updated>2008-05-27T12:39:00+10:00</updated>
    <id>http://davesquared.net/2008/05/top-down-vs-bottom-up-design</id>
    <content type="html"><![CDATA[<p>I've been having a think about top-down (a.k.a. outside-in) design during my recent <a href="http://davesquared.net/2008/05/garden-race-pt-2-adding-multiple.html">iterative development exercise</a>. In the series I've been putting off testing from the client layer down, primarily because GUIs have a reputation for being hard to test and harder to test-drive, and I wanted to make some early, easy progress on the core logic of the game.</p>




<p>I started to think that this approach might be a mistake. I'm dealing with the model that I <i>think</i> we'll need, not one demanded from the primary client of the model -- the GUI. <a href="http://www.lostechies.com/blogs/chad_myers/archive/2008/05/14/ping-pong-pairing-session-screencast-with-ben-scheirman.aspx">Chad</a> and <a href="http://flux88.com/ScreencastTestDrivingAnInventoryScreen.aspx">Ben</a> mentioned in their <a href="http://www.benscheirman.com/screencasts/tdd-inventory">recent screencast</a> that bottom-up implementation tended to lead to mistaken assumptions about infrastructure required by the top layers. I saw a <a href="http://groups.google.com/group/behaviordrivendevelopment/browse_thread/thread/329ee6604f56231b/edb191c2152a1572?hl=en#edb191c2152a1572">similar point made on the BDD mailing list by Pat Maddox</a>. Pat wrote (emphasis mine):</p>




<blockquote>"I find an outside-in style of development to be very helpful...  
It forces you to think of your objects at a high
level, so <b>your design is driven by real need</b>, and then you apply your
design skills as you go on.  <b>When I use a pure bottom-up style, I
write more speculative code and go down the wrong path far more often
than I'd like</b>.  That's not to say that it's a problem inherent with
that style, but rather a problem that I've personally experienced, and
have more or less solved by using an outside-in approach."</blockquote>




<p>This is opinion is echoed in an <a href="http://tech.groups.yahoo.com/group/testdrivendevelopment/message/28244">unrelated post to the TDD mailing list by Olof Bjarnason</a>:</p>




<blockquote>&quot;I've been using TDD [bottom-up] for 2 years now, and it's been mostly a _great_
experience. The thing that bothers me most with &quot;classic TDD&quot; is that
sometimes I build too much functionality in my classes, which isn't
used in the end application after all. Even whole objects are wasted
in the worst case.&quot;</blockquote>




<p>The view here is that bottom-up design can lead to speculation and waste. By having a design driven directly by the overall, required behaviour, you only implement (and test) things that directly serve that behaviour. This can help eliminate speculative implementations of lower-level behaviour based on what you think the overall required behaviour will be.</p>




<h2>Not so fast...</h2>


<p>Sounds great! So what about inside-out / bottom-up / middle-out design? <a href="http://www.xprogramming.com/">Ron Jeffries</a> recently stated on the TDD mailing list that he <a href="http://tech.groups.yahoo.com/group/testdrivendevelopment/message/28250">generally prefers to start with the model</a> (unless the project is simply to build a viewer). Maybe there's a bit more to it?</p>




<p>Digging further into <a href="http://tech.groups.yahoo.com/group/testdrivendevelopment/message/28243">that thread on the TDD list</a>, there are a number of great points of view on the topic. Some TDD-ists argue that bottom-up design lets you build in small, easy steps, and refactor your way to the required behaviour that you would otherwise start with in top-down design. Others state that this leads to waste -- writing code and tests that just get refactored away. Which resulted in a couple of great quotes on the difference between refactored code and waste:</p>




<blockquote>&quot;I suppose we could also call the scaffold we use when
constructing a large building as waste, or the safety
harnesses as waste.&quot; -- <a href="http://tech.groups.yahoo.com/group/testdrivendevelopment/message/28260">John Roth to TDD list</a></blockquote>




<blockquote>&quot;The analogy with scaffolding for a house is an excellent one -
there is a lot of &quot;stuff&quot; constructed when building a house, *just* to
support the construction - it is then discarded.&quot; -- <a href="http://tech.groups.yahoo.com/group/testdrivendevelopment/message/28274">Casey Charlton to TDD list</a></blockquote>




<p>Top-down design can also lead to a <a href="http://codebetter.com/blogs/ian_cooper/archive/2008/02/04/classicist-vs-mockist-test-driven-development.aspx">&quot;mockist&quot; approach to TDD</a>, where you need to mock all the required dependencies to implement the high level behaviour. This isn't necessarily a bad thing, but over-reliance on mocking can <a href="http://codebetter.com/blogs/ian_cooper/archive/2007/12/19/mocks-and-the-dangers-of-overspecified-software.aspx">result in fragile tests</a>. Martin Fowler has a great article on the pros and cons of <a href="http://martinfowler.com/articles/mocksArentStubs.html">&quot;classic&quot; and &quot;mockist&quot; TDD</a>.</p>




<h2>Enough rambling already!</h2>




<p>While planning for part 3 of my <a href="http://davesquared.net/2008/05/garden-race-series.html">recent development exercise</a> I was coming to the conclusion that top-down was the way to go. After looking into it some more I was reminded of a whole host of advantages of bottom-up design. Even more importantly it reminded me that <a href="http://en.wikipedia.org/wiki/No_Silver_Bullet">there is no silver bullet</a>, and there are times when either, or a mix of both, approaches are fine. All this started to sound familiar, so firing up Google I noticed that I had read something to this effect in <a href="http://codebetter.com/blogs/jeremy.miller/archive/2008/03/03/unit-testing-playing-tennis-and-the-lack-of-absolutes-in-tdd.aspx">Jeremy Miller's excellent (as usual) post on the topic</a> (search for "Bottom Up versus Top Down", although the whole post is worth reading).</p>




<p>I think the most important conclusion I've reached during this ramble is that if you are working in iterations to deliver a complete slice of the application (top <i>and</i> bottom) then you're never going to go too far wrong. Any "waste" from a bottom-up approach will be minimal as you'll be working toward and implementing the top almost immediately. And you'll still end up with higher-level behaviour specified with unit tests. Likewise starting top-down you'll still get the advantages of designing in small steps, particularly as you drive down into the design.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BPM tools vs. developers]]></title>
    <link href="http://davesquared.net/2007/10/bpm-tools-vs-developers.html"/>
    <updated>2007-10-17T09:10:00+10:00</updated>
    <id>http://davesquared.net/2007/10/bpm-tools-vs-developers</id>
    <content type="html"><![CDATA[<p>Was going to send email this to a former colleague that shared some negative BPM tool experiences, but&nbsp;I think it raises some interesting points that are also applicable to <a href="http://davesquared.net/2007/05/rad-or-refactor.html">RAD tools</a> in general.</p>


<p> <p>Frank Sommers uncovers some very interesting views in <a title="this post" href="http://www.artima.com/forums/flat.jsp?forum=276&amp;thread=216851">this post</a> (both in posts it links to, and in the comments)&nbsp;on why many developers rail against BPM tools:</p> <p><a title="Java Community News - Are BPM Tools Useful to Developers?" href="http://www.artima.com/forums/flat.jsp?forum=276&amp;thread=216851">Java Community News - Are BPM Tools Useful to Developers?</a></p> <p>Two schools of thought seem to be that developers don't like BPM because of the threat (perceived or real) they pose to their livelihood (which I believe is true at least to some&nbsp;degree), or that they don't like it because it actually gets in the way of doing things efficiently (which is my main complaint).</p> <p>One of the good quotes in the article is this one from <a href="http://www.oreillynet.com/onjava/blog/2007/10/do_i_hate_bpm_no_i_hate_bpm_pr.html">Robert Cooper</a>:</p> <blockquote> <p>"These products are unworkable because they are based on the idea that “You won’t need programmers anymore!” at least at a core level. Once you make that assumption you start building things that get in programmers way, and still include enough abstract programming concepts that no non-programmer is ever going to be able to work with it proficiently."</p></blockquote> <p>Another good one is in a comment from James Watson, where he states "This idea that developers don't want to use drag and drop tools because it's boring is a load of crap... Most programmers are busy and if a tool can save them time and headaches they will use it". He then goes on to list the typical cycle of how these things are introduced, which would be hysterically funny if it wasn't so true. I have quoted the list here as there is no permalink to the comment:</p> <blockquote> <p>1. The salespeople tell some suckers that they won't need developers anymore. Many lies are told.<br>2. The company bites. They might even layoff some developers.<br>3. Non-developers try to create their own programs with 'simple' drag and drop tools.<br>4. Complete meltdown ensues when the first bump brings the house-of-cards crashing down.<br>5. The developers are now told to use this tool to do their work and maintain the steaming pile that has been built. (a.k.a throwing good money after bad.)<br>6. The developers try to maintain the mess that the non-developers wrote and create maintainable software without the tools that developers normally use (because they work.)<br>7. Productivity and/or quality continue to suffer. Developer morale drops. Much more 'code' is created than would be needed in conventional development approaches.<br>8. "Experts" in the tool are contracted and/or hired at great expense. They teach the developers how to work around all of the product's deficiencies in order to be moderately productive.<br>9. The rising expenses cause managers to look for ways to reduce development staff. Outsourcing may be used.<br>10. A vendor comes in to tell some suckers that developers won't be needed with their new drag&nbsp;and drop tool...</p></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comment roundup: SharePoint as a development platform]]></title>
    <link href="http://davesquared.net/2007/09/comment-roundup-sharepoint-as.html"/>
    <updated>2007-09-21T10:02:00+10:00</updated>
    <id>http://davesquared.net/2007/09/comment-roundup-sharepoint-as</id>
    <content type="html"><![CDATA[<p>Looks like a couple of interesting posts on using SharePoint / WSS / MOSS as a development platform. I was originally going to send this as an email to a former colleague (hi mate!) but thought I would post it instead because I find the debate quite interesting. Remember, the discussion is about SharePoint as a <strong>development platform</strong>, not as a CMS or whatever else.</p>


<p> <p>I first found <a title="Ayende's post" href="http://ayende.com/Blog/archive/2007/09/20/Development-Platforms-again.aspx">Ayende's post</a> on the topic, which is a response to <a href="http://blah.winsmarts.com/2007-9-SharePoint_is_a_terrific_development_platform.aspx">Sahil Malik's response</a> to <a href="http://codebetter.com/blogs/jeffrey.palermo/archive/2007/09/13/sharepoint-is-not-a-good-development-platform.aspx">Jeffrey Pallermo's post on the SharePoint development platform</a> :)</p> <p><a href="http://codebetter.com/blogs/jeffrey.palermo/archive/2007/09/13/sharepoint-is-not-a-good-development-platform.aspx">Jeffrey's post</a> raises the (IMHO) valid issue of the friction of using the SharePoint platform for development, particularly for deployment and builds. Unfortunately his point gets a bit diluted by focusing on the non-issue of being unable to install SharePoint on Vista/XP. </p> <p>I think one of the stars of the comment trail on <a href="http://codebetter.com/blogs/jeffrey.palermo/archive/2007/09/13/sharepoint-is-not-a-good-development-platform.aspx">Jeffrey's post</a> is <a href="http://www.andrewconnell.com/blog">Andrew Connell</a> (MOSS MVP, and pretty decent bloke if his blog, comments and presentation at the APAC SharePoint 2007 conference in Sydney are anything to go by), who has added some very constructive comments pointing out the strengths of the platform lie in the out-of-the-box navigation, security, search, Web Part framework, WF hosting etc, as well as acknowledging several weaknesses. One of the things I found really interesting (although not too surprising) is this part of Andrew's comment:</p> <blockquote> <p>"Over hyped? Really... so that's why it's the highest growth product ever in the history of the company and closing in on $1B in sales for the latest version in just a few months from now? That's ALL marketing hype with the other portal solutions and other content management applications out there? Um... I think business decision makers are a bit more savy than that."</p></blockquote> <p>For years now I have had the strong suspicion that people that look to things like <a href="http://www.openoffice.org/">OpenOffice.org</a> as potential Office-killers are missing the main point of Microsoft's Office strategy. I'm sure they are not too fussed about losing a few home users -- they are targeting the bigger end of town with volume licencing. The integration, no, <strong>dependency</strong> (they are part of the same platform after all) between Office 2007 on the client and MOSS 2007 on the server is where the action is. The complete platform is going to guarantee them a nice revenue stream from medium, big and giant businesses for as long as they can keep pumping up version numbers.</p> <p>As a further aside, Andrew also writes a&nbsp; "Not every application should be built on SharePoint... no one is advocating that (no reasonable person that is)." Marcus makes a similar observation: </p> <blockquote> <p>"I'm not sure you realize how many people right now are investing in SharePoint thinking that it is a "no-code" solution to replacing custom ASP.Net apps, or in some way making managability of those easier. ... It doesn't do that.&nbsp; Its a content management system (and a good one at that)."</p></blockquote> <p>(Sorry, gentle dig... bygones! ;) :P)</p> <p>The main complaints in the comments revolve around the poor tool support (agreed by pretty much everyone), the poor / barely existent documentation (ditto), and testability, deployment and configuration (over which there is much disagreement). The latter issue brings us back to one of Jeffrey's original points: the friction of using the platform.</p> <p>I have personally found SharePoint development (as a MOSS newbie anyway) to be very high friction. The minute you want to go "out-of-the-box" at all you run into all sorts of issues. Even talking to the experts at the recent APAC SharePoint 2007 conference in Sydney exposed so many work-arounds and compromises just to comply with the platform. The session on packaging and deploying custom applications (run by a bloke who really knew his stuff) was filled with advice like "this bit doesn't work properly, so you need to manually edit this XML, you can copy it from another file in the 12 folder, then adjust the package names and then...". </p> <p>Andrew suggests that this is simply a cost of using any platform:</p> <blockquote> <p>"So I want to build add-ins for Visual Studio. Is it easy? Nope... because I need this and that and have all this work to do just to get my environment ready to build a plugin.  <p>To me the issue isn't with SharePoint, it is jumping into working within and integrating with platform unlike pure ASP2 development where you building from the ground up."</p></blockquote> <p>I am unconvinced. Yes, I agree there will be a cost associated with using and complying with any platform, but a platform really exists to make your life easier. SharePoint's big failing in this department IMHO is that the compliance costs are very high, and the platform is too broad. By trying to do everything, it does some things well and some things badly, and in the latter cases it can be very difficult to go outside of the platform. In these cases you start wondering if the whole thing would have been better off in regular ASP.NET.  <p>There are a long list of great comments on Jeffrey's post, and they make a very good read, if you are interested in such things.</p></p>
]]></content>
  </entry>
  
</feed>
