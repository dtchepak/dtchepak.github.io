<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: wcf | dave^2 = -1]]></title>
  <link href="http://davesquared.net/categories/wcf/atom.xml" rel="self"/>
  <link href="http://davesquared.net/"/>
  <updated>2022-10-15T16:55:10+11:00</updated>
  <id>http://davesquared.net/</id>
  <author>
    <name><![CDATA[David Tchepak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Enabling tracing for WCF (then making sense of the output)]]></title>
    <link href="http://davesquared.net/2008/05/enabling-tracing-for-wcf.html"/>
    <updated>2008-05-07T15:06:00+10:00</updated>
    <id>http://davesquared.net/2008/05/enabling-tracing-for-wcf</id>
    <content type="html"><![CDATA[<p>I've been battling with a few of WCF's &quot;endearing&quot; foibles over the last couple of days (like <a href="http://nimtug.org/blogs/damien-mcgivern/archive/2008/01/30/wcf-required-precompiled-asp-net-site-to-be-updatable.aspx">this one</a>). One thing that I really should have noticed earlier to help with this battle is that you can <a href="http://msdn.microsoft.com/en-us/library/ms733025.aspx">enable tracing for WCF</a>. MSDN gives <a href="http://msdn.microsoft.com/en-us/library/ms733025.aspx">this example</a>:</p>


<p>    <pre>&lt;configuration&gt;
   &lt;system.diagnostics&gt;
      &lt;sources&gt;
            &lt;source name=&quot;System.ServiceModel&quot;
                    switchValue=&quot;Information, ActivityTracing&quot;
                    propagateActivity=&quot;true&quot;&gt;
            &lt;listeners&gt;
               &lt;add name=&quot;traceListener&quot;
                   type=&quot;System.Diagnostics.XmlWriterTraceListener&quot;
                   initializeData= &quot;c:\log\Traces.svclog&quot; /&gt;
            &lt;/listeners&gt;
         &lt;/source&gt;
      &lt;/sources&gt;
   &lt;/system.diagnostics&gt;
&lt;/configuration&gt;
</pre></p>

<p>This produces a fairly unreadable mess, but you can use the <a href="http://msdn.microsoft.com/en-us/library/ms732023.aspx">Service Tracer Viewer</a> (<code>SvcTraceViewer.exe</code>) that comes with the Windows SDK (<code>C:\Program Files\Microsoft SDKs\Windows\v6.0A\Bin</code> on my PC) to get some useful information out of it. This is actually quite a cool tool, providing a nice interface to view all the different activities happening behind the scenes, and highlighting errors that occur.</p>


<p><a href="http://davesquared.net/images/fromblogger/s1600-h-wcfTraceViewScreenshot.png"><img src="http://davesquared.net/images/fromblogger/s400-wcfTraceViewScreenshot.png" border="0" alt="WCF Trace Viewer screen shot" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding IPrincipal to the list of known types in WCF]]></title>
    <link href="http://davesquared.net/2008/05/adding-iprincipal-to-wcf-list-of-known.html"/>
    <updated>2008-05-02T14:58:00+10:00</updated>
    <id>http://davesquared.net/2008/05/adding-iprincipal-to-wcf-list-of-known</id>
    <content type="html"><![CDATA[<p>WCF has a concept called <a href="http://msdn.microsoft.com/en-us/library/ms730167.aspx">Known Types</a>, which lets WCF handle subclasses and interface implementations passed to services. Normally you can just whack a <a href="http://msdn.microsoft.com/en-us/library/system.runtime.serialization.knowntypeattribute.aspx">KnownTypeAttribute</a> on your DataContract and you're good to go:</p>


<pre>[DataContract]
[KnownType(typeof(Manager))]
public class Employee { ... }
</pre>


<p>In the example above, the service will be able to use the <code>Manager</code> subclass anywhere it expects an <code>Employee</code>.</p>


<p>This doesn't help much when you want to use non-DataContract types like <code>IPrincipal</code>. Trying to pass a <code>GenericPrincipal</code> to a service operation that expects an <code>IPrincipal</code> gives you an error message like this (line breaks added for slightly improved legibility):</p>


<pre>System.Runtime.Serialization.SerializationException:
Type 'System.Security.Principal.GenericPrincipal' with data contract name 'GenericPrincipal:http://schemas.datacontract.org/2004/07/System.Security.Principal' is not expected. 
Add any types not known statically to the list of known types - 
for example, by using the KnownTypeAttribute attribute or by adding them to the list of known types passed to DataContractSerializer.</pre>


<p>One solution is to decorate your service contract with a <a href="http://msdn.microsoft.com/en-us/library/system.servicemodel.serviceknowntypeattribute.aspx">ServiceKnownTypeAttribute</a>:</p>


<pre>[ServiceContract]
<strong>[ServiceKnownType(typeof(GenericIdentity))]
[ServiceKnownType(typeof(GenericPrincipal))]</strong>
public interface ISomeService {
  [OperationContract]
  String DoSomethingWith(<strong>IPrincipal principal</strong>);
}</pre>




<p>While I don't necessarily recommend exposing <code>IPrincipal</code> through your service, the technique is worth knowing about. Most of the search results I got mentioned <code>KnownTypeAttribute</code> and not <code>ServiceKnownTypeAttribute</code>.</p>




<p>Thanks to Steven Cheng who answered this question <a href="http://www.eggheadcafe.com/software/aspnet/31749760/wcf-35-and-problem-with.aspx">in his response to this post</a>. Steven also provided a link to <a href="http://footheory.com/blogs/bennie/">Bennie Haelen's</a> fantastic post on <a href="http://footheory.com/blogs/bennie/archive/2007/07/28/handling-data-contract-object-hierarchies-in-wcf.aspx">Handling Data Contract Object Hierarchies in WCF</a>, which covers more than you could ever want to know about this stuff :-).</p>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faking WCF authentication for integration tests]]></title>
    <link href="http://davesquared.net/2008/04/faking-wcf-authentication-for.html"/>
    <updated>2008-04-21T16:48:00+10:00</updated>
    <id>http://davesquared.net/2008/04/faking-wcf-authentication-for</id>
    <content type="html"><![CDATA[<p>I am currently trying to write some integration tests for a WCF service. The service itself calls a controller that uses <a href="http://davesquared.net/2008/04/getting-current-identity-in-wcf.html"><code>ServiceSecurityContext.Current.PrimaryIdentity</code></a> to get the current user, then checks what the user can do. For the purpose of my integration tests, I wanted to hard code the current user, and then expect certain results back for that user.</p>




<p>Now the username lookup is nicely abstracted behind an identity provider interface, so I would ideally just use a dependency injection tool to replace the identity lookup with something that suits my tests. For a number of reasons this wasn't possible, so instead I had to override the WCF authentication process to always return the required user.</p>




<p>First thing was to setup a <code>ServiceHost</code> so the test runner could self-host the WCF service. You can test the service directly without hosting, but in this case we wanted to test things through a host. This implementation isn't careful about disposing of resources properly, so I'd think twice about copying any of this for real use if I were you :-).</p>




<pre>
[TestFixture]
public class MyServiceIntegrationTests {

  private ServiceHost host;
  private ServiceEndpoint serviceEndpoint;

  [TestFixtureSetUp]
  public void FixtureSetup() {
    host = new ServiceHost(typeof(MyService), new Uri(&quot;http://localhost:8080/TestMyService&quot;));

    //Hack up host security for testing
    <b>host.Authorization.ExternalAuthorizationPolicies
        = new List&lt;IAuthorizationPolicy&gt; { new TestAuthPolicy() }.AsReadOnly();
    host.Authorization.PrincipalPermissionMode = PrincipalPermissionMode.Custom;</b>

    //Add endpoint
    serviceEndpoint = host.AddServiceEndpoint(typeof (IMyService), new BasicHttpBinding(), String.Empty);
    
    host.Open();
  }
  [TestFixtureTearDown]
  public void CleanupAfterAllTests() {
    host.Close();
  }
  ...
}  
</pre>




<p>The emphasised bit is where we rip into the WCF authorisation process, by setting the permission mode to <code>PrincipalPermissionMode.Custom</code>, and substituting our own <code>IAuthorizationPolicy</code> instance, <code>TestAuthPolicy</code>, which looks like this:</p>




<pre>
internal class TestAuthPolicy : IAuthorizationPolicy {
  public string Id { get { return &quot;TestAuthPolicy&quot;; } }

  public bool Evaluate(EvaluationContext evaluationContext, ref object state) {  
    evaluationContext.Properties[&quot;<b>Principal</b>&quot;] = <b>new TestPrincipal()</b>;
    IList&lt;IIdentity&gt; identities = new List&lt;IIdentity&gt; {<b>new TestIdentity()</b>};
    evaluationContext.Properties.Add(&quot;<b>Identities</b>&quot;, identities);
    return true;
  }

  public ClaimSet Issuer { get { return ClaimSet.System; } }
}
</pre>




<p>Here we implement the <code>Evaluate</code> method to update the <code>EvaluationContext</code> properties. We set the Principal property to our own <code>TestPrincipal</code> object, and to set the Identities property to use our own <code>TestIdentity</code>. These test objects are rigged to always return our required test principal and identity:</p>




<pre>
internal class TestPrincipal : IPrincipal {
  public bool IsInRole(string role) { return true; }
  public IIdentity Identity { get { <b>return new TestIdentity();</b> } }
}

internal class TestIdentity : IIdentity {
  <b>public string Name { get { return @&quot;MyTestDomain\MyTestUser&quot;; } }</b>
  public string AuthenticationType {
    get { return &quot;Dodgy auth&quot;; }
  }
  public bool IsAuthenticated { get { return true; } }
}
</pre>




<p>The integration test can then be run like this:</p>




<pre>
[Test]
[Category("Integration")]
public void Should_be_able_to_call_my_poxy_WCF_service() {
  using (var channelFactory = new ChannelFactory&lt;IMyService&gt;(serviceEndpoint)) {  
    var service = channelFactory.CreateChannel();
    var output = service.DoStuff("Please work!");
    Assert.That(output, Is.EqualTo("Worked! Hurrah!"));
    ((IChannel)service).Close();
  }
}
</pre>




<p>So here's what we've done. We've self-hosted a WCF service in the test fixture, and overridden the authorisation process used by that host to make it look like we always have an authenticated &quot;MyTestDomain\MyTestUser&quot; user. We then created a <code>ChannelFactory</code> to connect to that host and test the service from end-to-end (well, except for the authorisation part things ;-)). You can obviously muck around with the custom authorisation bits to change the user on the fly, so you can test different users and situations where the user is not authenticated.</p>




<p>Hope this helps. Let me know if I've missed easier ways of doing this :-)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting the current identity in WCF]]></title>
    <link href="http://davesquared.net/2008/04/getting-current-identity-in-wcf.html"/>
    <updated>2008-04-17T13:17:00+10:00</updated>
    <id>http://davesquared.net/2008/04/getting-current-identity-in-wcf</id>
    <content type="html"><![CDATA[<p>Playing around with an ASP.NET-hosted WCF service today. While testing using the <a href="http://msdn2.microsoft.com/en-us/library/bb552364.aspx">WCF Test Client</a> I (unsurprisingly in retrospect) got a null reference exception when trying to access <code>HttpContext.Current</code>. This completely stuffed up my attempt to get the current identity from <code>HttpContext.Current.User.Identity</code>.</p>




<p>After a quick search I found the <a href="http://msdn2.microsoft.com/en-us/library/system.servicemodel.servicesecuritycontext.aspx">ServiceSecurityContext class</a> in the <code>System.ServiceModel</code> namespace. This gives you the current identity using <code>ServiceSecurityContext.Current.PrimaryIdentity</code> (and also exposes the current <code>WindowsIdentity</code>).</p>




<p>Helpfully enough my code was well factored for once (to help with my unit testing/TDDing) and I only had to make the change in one place :)</p>




<p>Might be some more gotchas around this depending on what authentication mechanism you are using, but this was enough to get things working for me.</p>

]]></content>
  </entry>
  
</feed>
