<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vs.net | dave^2 = -1]]></title>
  <link href="http://davesquared.net/categories/vs-net/atom.xml" rel="self"/>
  <link href="http://davesquared.net/"/>
  <updated>2022-10-15T16:55:10+11:00</updated>
  <id>http://davesquared.net/</id>
  <author>
    <name><![CDATA[David Tchepak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ReSharper Live Template for Dependency Properties (C#)]]></title>
    <link href="http://davesquared.net/2009/06/resharper-live-template-for-dependency.html"/>
    <updated>2009-06-27T21:38:00+10:00</updated>
    <id>http://davesquared.net/2009/06/resharper-live-template-for-dependency</id>
    <content type="html"><![CDATA[<p>The syntax for declaring WPF dependency properties can get a little tedious to type. I ended up creating a ReSharper Live Template which has been working nicely for me:</p>




<pre class="brush:csharp">
public static readonly DependencyProperty $PropertyName$Property = 
    DependencyProperty.Register(&quot;$PropertyName$&quot;, typeof($PropertyType$), typeof($PropertyOwner$));

public $PropertyType$ $PropertyName$ {
    get { return ($PropertyType$) GetValue($PropertyName$Property); }
    set { SetValue($PropertyName$Property, value); }
}
</pre>




<p>Then configure the substitutable variables as follows:</p>




<ul>
<li>PropertyName, no macro, #3 editable</li>
<li>PropertyType, Guess type expected at this point, #2 editable</li>
<li>PropertyOwner, Containing type name, not editable</li>
</ul>




<p>This lets me type in <code>dp</code> and fill in the blanks. Hope this helps. :)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting to grips with ReSharper]]></title>
    <link href="http://davesquared.net/2007/10/getting-to-grips-with-resharper.html"/>
    <updated>2007-10-17T22:15:00+10:00</updated>
    <id>http://davesquared.net/2007/10/getting-to-grips-with-resharper</id>
    <content type="html"><![CDATA[<p>On the couple of occasions I have talked people into trying JetBrains ReSharper (R#), the first thing they seem to notice is that it can optimise your <code>using</code> statements, and that it puts are bar down the right hand side of your editor showing you all the mistakes you have made in bright red and yellow stripes. There is obviously a lot more to ReSharper than that, and I've noticed people seem to get as much out of it as they put into it. Here are some of the features I found useful when I first started getting to know ReSharper 3.0.</p>


<p> <h2>Navigation</h2> <p>ReSharper introduces many nice ways of finding your way around your code. The File Structure View provides a list of all the members in your current class. Double clicking on a member jumps to that point in the code. You can also rearrange members and manage code <code>#region</code> blocks. </p> <p>The mechanics of the File Structure View are fantastic, but to me the biggest advantage is the additional awareness it provides. At a glance you can take in all the members in the current file, which means you always have a good awareness of the context in which you are working, such as the class' current responsibilities. </p> <p>I dock my File Structure View window to the right of VS and find it invaluable. You can access this window via the ReSharper &gt;&gt; Windows menu, or Ctrl + Alt + F.</p> <p><a href="http://davesquared.net/images/fromblogger/s1600-h-fileStructureView.png"><img id="BLOGGER_PHOTO_ID_5122265770966624930" alt="Screen shot of File Structure View" src="http://davesquared.net/images/fromblogger/s400-fileStructureView.png" border="0"></a> </p> <p>ReSharper also provides a number of shortcuts to jump to a file, type, or symbol (Ctrl + T, Ctrl + Shft + T and Shft + Alt + T respectively). This lets you start typing part of the file/type/symbol you are looking for, and pops up an auto-complete box that allows you to quickly jump to the item you are after. Generally much faster than using Solution Explorer.</p> <p>Other navigation features include an improved (over the standard VS) "Find Usages" feature, and a "Navigate from here..." menu that lets you jump to base, type declaration, function exits and more.</p> <h2>Code Generation</h2> <p>Mashing Alt + Insert opens a code generation menu, from which you can access wizards to generate properties with backing fields, constructors, interface implementations, and even delegations to class members. When I write "wizards", don't go picturing <a href="http://en.wikipedia.org/wiki/Clippy">Clippy</a> or some equivalent monstrosity -- these are actually helpful! For example, the constructor generator lets you select the fields/properties you wish to initialise in the constructor's parameters and then dumps the constructor into your class. The wizards are generally very keyboard friendly as well, so you don't have to madly chase your rodent around trying to click obscure buttons or links.</p> <p><a href="http://davesquared.net/images/fromblogger/s1600-h-generateConstructor.png"><img id="BLOGGER_PHOTO_ID_5122268395191642818" alt="Generate constructor screenshot" src="http://davesquared.net/images/fromblogger/s400-generateConstructor.png" border="0"></a> </p> <h2>Templates</h2> <p>The templates in ReSharper are incredible. There are a couple of templates build in (try typing "foreach&lt;TAB&gt;" into a method that takes any IEnumerable like an array as a parameter. No really, go try it! I'll wait...), but the real power comes from creating your own Live or Surround With template. </p> <p>The templates support parameter substitution (i.e. you put a token in your template), and through the template builder UI you can specify exactly how these parameters are populated at run time. For example, you can tell ReSharper to guess the substitution based on the current type, current parameters, or even transform an existing name (such as using the camel-cased version of a Pascal-cased property name). </p> <p><a href="http://davesquared.net/images/fromblogger/s1600-h-createBasicTemplate-0.png"><img id="BLOGGER_PHOTO_ID_5122268399486610130" alt="Edit template example" src="http://davesquared.net/images/fromblogger/s400-createBasicTemplate-0.png" border="0"></a> </p> <p>The educated guesses ReSharper uses are generally spot on, and are used in a number of places throughout the product, such as some of the Quick Fixes.</p> <p>You use a template by typing part of the name into VS, and selecting the template from the autocomplete menu that pops up.</p> <h2>Refactoring</h2> <p>The standard Visual Studio refactorings are awful. On every PC I have used it has been almost entirely unusable. Trying to rename a private class member tended to cause a complete recompilation of the entire solution and basically take an eternity. ReSharper's refactorings work in milliseconds, and provide a whole lot more than VS.</p> <p>The standard ReSharper 3.0 keymap (not the IntelliJ/ReSharper 2.x one) lets you mash Ctrl + Shft + R to open a context-sensitive refactoring menu. For example, if you highlight a passage of code and hit Ctrl + Shft + R, you can choose <em>Extract Method</em> to move that code to its own method. ReSharper will either instantly apply your refactoring, or open one of its helpful wizards if it needs a bit more data from you to continue.</p> <p>There are also several chords you can press as short cuts to various refactorings, like Ctrl + R, Ctrl + V to apply the <em>Introduce Variable</em> refactoring. The refactoring features of ReSharper are extremely powerful, but in my experience require the most amount of work to learn how to use effectively. Every day I seem to find a new way to use a ReSharper refactoring to make coding easier.</p> <p>The screen shots below show the "Refactor This" menu that appears after a value is selected and Ctrl + Shft + R is pressed. The second shot shows the Introduce Variable wizard, and the third shows the result.</p> <p><a href="http://davesquared.net/images/fromblogger/s1600-h-introduceVariable-0-RefactorThis.png"><img id="BLOGGER_PHOTO_ID_5122273523382594322" alt="Refactor This context menu" src="http://davesquared.net/images/fromblogger/s400-introduceVariable-0-RefactorThis.png" border="0"></a> </p> <p><a href="http://davesquared.net/images/fromblogger/s1600-h-introduceVariable-1-Context.png"><img id="BLOGGER_PHOTO_ID_5122273531972528930" alt="Introduce variable refactoring example" src="http://davesquared.net/images/fromblogger/s400-introduceVariable-1-Context.png" border="0"></a></p> <p><a href="http://davesquared.net/images/fromblogger/s1600-h-introduceVariable-2.png"><img id="BLOGGER_PHOTO_ID_5122274867707358002" alt="Result of introduce variable refactoring" src="http://davesquared.net/images/fromblogger/s400-introduceVariable-2.png" border="0"></a> </p> <h2>Intellisense improvements</h2> <p>ReSharper, depending on which options you have specified (ReSharper menu &gt;&gt; Options), augments the standard Intellisense offered by Visual Studio. One option I turn on is to show more info about members, such as the return types. It is a good idea to play around with this to best suit the way you work.</p> <p>The main thing ReSharper offers in this area is smart autocomplete and type autocomplete. Instead of the default Intellisense triggers such as Ctrl + Space, you can press <em>Ctrl + Shft + Space</em> or <em>Shft + Alt + Space</em> to get ReSharper to intelligently restrict the autocompletion options base on your current context. For example, if you are initialising a variable from a method call and and trigger a type-autocomplete, ReSharper will only show you a list of methods that return a compatible type.</p> <h2>Quick fixes</h2> <p>This is the best feature in my book. Whenever ReSharper finds an error, a suggestion, or recognises a number of common actions in the current context, it will flash up a light bulb and underline the relevant code. The colour of the light bulb and underline will depend on what type of quick fix ReSharper has identified (error, suggestion etc).</p> <p>When you see <img id="BLOGGER_PHOTO_ID_5122268390896675506" alt="Quick fix icon" src="http://davesquared.net/images/fromblogger/s400-quickFixSymbol.png" border="0">, press Alt + Enter to open the Quick Fix context menu, which will solve all your problems for you.</p> <p>An example that is really useful when doing TDD is when you write some test code first that does not yet exist. The missing method will be written in red, and the quick fix icon will appear. Pressing Alt + Enter will display the menu shown below:</p> <p><a href="http://davesquared.net/images/fromblogger/s1600-h-quickFix-CreateMethod-0.png"><img id="BLOGGER_PHOTO_ID_5122270284977253090" alt="Quick fix menu to create a method" src="http://davesquared.net/images/fromblogger/s400-quickFix-CreateMethod-0.png" border="0"></a></p> <p>If you select "Create method...", a method stub will be generated, and you can TAB through the fields in the template ReSharper uses and fill in the details. The screen shot below shows ReSharper's suggestions for the parameter name, or you can specify a completely different name.</p> <p><a href="http://davesquared.net/images/fromblogger/s1600-h-quickFix-CreateMethod-1.png"><img id="BLOGGER_PHOTO_ID_5122270289272220402" alt="Quick fix process suggests a method name" src="http://davesquared.net/images/fromblogger/s400-quickFix-CreateMethod-1.png" border="0"></a></p> <p>Another TAB press and you can replace the <code>throw new NotImplementedException();</code> line with your required implementation:</p> <p><a href="http://davesquared.net/images/fromblogger/s1600-h-quickFix-CreateMethod-2.png"><img id="BLOGGER_PHOTO_ID_5122270289272220418" alt="After quick fix method creation" src="http://davesquared.net/images/fromblogger/s400-quickFix-CreateMethod-2.png" border="0"></a> </p> <h2>But wait, there's more!</h2> <p>There is a Unit Test Runner, an option to cycle through your copy/paste clipboard (Ctrl + Shft + V), more code colouring options (such as greying out dead/unused code), automatic xml-doc generation for parameters, automatic importing of relevant namespaces, dead code removal and more!</p> <h2>Can I have my commission now?</h2> <p>There is so much to ReSharper, and you really will get as much out of it as you put into it. Once you become familiar with it you will find your code almost writing itself. I really recommend exploring the options it offers (ReSharper menu &gt;&gt; Options), as well as looking through and trying all the features. If you want an idea of exactly what can be accomplished, have a look at <a href="http://resharper.blogspot.com/2007/05/coding-session-with-resharper.html">this video</a> from Ilya Ryzhenkov, .NET Tools Product Manager at JetBrains.</p> <p>There are only a couple of downsides to ReSharper. One is that you need a decent PC to run it on anything but a trivially sized project -- it is a real memory hog, despite improvements being made over v2. Secondly, it is quite easy to become dependent on ReSharper, and feel lost when you go back into normal VS-land. Sometimes I feel like I need to jump back into emacs to remember how to do stuff old-skool :) The other problem with the product is that it leaves you hankering for JetBrains to develop a Visual Studio replacement, say, Intelli.Net :)</p> <p>Hope this post helps give your ReSharpering a jumpstart. :)</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Link: Speed up Visual Studio 2005]]></title>
    <link href="http://davesquared.net/2007/10/link-speed-up-visual-studio-2005.html"/>
    <updated>2007-10-12T08:34:00+10:00</updated>
    <id>http://davesquared.net/2007/10/link-speed-up-visual-studio-2005</id>
    <content type="html"><![CDATA[<p>Couple of good tips on speeding up your IDE:</p>


<p> <p><a href="http://dotnettipoftheday.org/tips/speedup_visual_studio.aspx">.NET Tip of The Day: Speed up Visual Studio 2005</a> </p> <p>Bookmarking here for next time I need to setup VS 2005 (and some of this will probably go well in VS 2008 too).</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Opening a VS item's directory in Explorer]]></title>
    <link href="http://davesquared.net/2007/09/opening-vs-item-directory-in-explorer.html"/>
    <updated>2007-09-04T13:46:00+10:00</updated>
    <id>http://davesquared.net/2007/09/opening-vs-item-directory-in-explorer</id>
    <content type="html"><![CDATA[<p>I use TortoiseSVN as my SVN client, but it is not integrated into Visual Studio like AnkhSVN and others. This generally suits the way I like to work, but occasionally it would be nice to right click on a new class and pick "Add to SVN", or have an easy way of doing an SVN move. I have recently started using a simple way of accessing these features, without installing a VS-integrated client, by&nbsp;providing a shortcut to opening a Visual Studio&nbsp;item's folder in Windows Explorer where we can use all our standard TortoiseSVN functionality.</p>


<p> <p><em><strong>UPDATE 2007-09-24</strong>: The functionality provided by the following steps is very similar to right-clicking on tab of an open file, and selecting "Open containing folder", which I admittedly only just noticed<em>. I have left this example online for two reasons. First, the method below offers a bit more functionality, as it also works for files selected in the Solution Explorer. Secondly, the general approach described is&nbsp;a really useful technique for easily extending VS. For example, I remember seeing a screencast of configuring Subsonic's SubCommander as an external tool in VS to generate your DAL and script your database with a single button click.</em></p> <p>From Visual Studio 2005 (similar steps should work for 2008/Orcas too):</p> <ol> <li>Go to the <em>Tools</em> menu and select <em>External Tools...</em>  <li>Click on the <em>Add</em> button  <li>Set the executable to your Windows Explorer path (<code>C:\WINDOWS\Explorer.exe</code> on my PC).  <li>Set the arguments and initial directory to <code>"$(ItemDir)"</code>. Not sure if the quotes are needed incase you have spaces in your paths, but they don't seem to hurt.  <li>Give it a title, such as <code>Open in E&amp;xplorer</code>. The <code>&amp;</code> just designates the menu accessor key, which is <em>x</em> in this case. -- you can leave it out if you like.  <li>Note which number your external tool is in the list -- in the screenshot mine is #7 (1-based counting here). This is only for if you want to create a menu button for this external tool.  <li>Click OK</li></ol> <p><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://davesquared.net/images/fromblogger/s1600-h-externalTools.png"><img id="BLOGGER_PHOTO_ID_5106193564831098418" style="display: block; margin: 0px auto 10px; cursor: hand; text-align: center" alt="Screenshot of External Tools dialog." src="http://davesquared.net/images/fromblogger/s400-externalTools.png" border="0"></a></p> <p>You can now select an item in the solution explorer, or just use the file you are currently editing, and go to <em>Tools --&gt; Open in Explorer</em> to open the file's folder. Now you are back in Tortoise country, and can add the file to SVN.</p> <p>You can make this even easier by setting up a menu button for the external tool:</p> <ol> <li>Right-click on one of your menu bars and select <em>Customise</em> (ok, it says <em>Customize</em>, but I can correct the spelling can't I? :) )  <li>From the <em>Commands</em> tab, select the <em>Tools</em> category, and then <em>External Command {xx}</em>, where {xx} is the number you carefully noted in step 6 of creating the external tool.  <li>Drag and drop the command on to the menu bar of your choice.  <li>Customise the button's appearance as required. I right clicked on the <em>View --&gt; Solution Explorer</em> menu item and selected <em>Copy Button Image</em>, then right-clicked on my button and used <em>Paste Button Image</em> to get a purdy icon. I also hid the text description so it takes less room on my menu bar.  <li>Click <em>Close</em> on the customisation dialog.</li></ol> <p>You can now select a file, click the icon, and voila, instant Explorer. Ok, so this sounds largely pointless, but it does really help me to quickly switch between Visual Studio and TortoiseSVN.</p> <p style="font-size: x-small"></em> There seems to be <a href="http://www.aaronlerch.com/blog/2007/09/11/the-talented-mr-editgotofindcombo/">quite a lot</a> of <a href="http://www.chinhdo.com/chinh/blog/20070920/top-11-visual-studio-2005-ide-tips-and-tricks-to-make-you-a-more-productive-developer/">cool crouching-tiger-hidden-features in VS 2005</a> (i.e. features that are not very discoverable). Some of the things I love about Resharper are present (mostly in simplified form) in standard VS 2005, but they are easier to discover (and generally easier to use and work better IMHO, YMMV) in Resharper.</p><hints id="hah_hints"></hints></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Access Guidance Package - DAL generation]]></title>
    <link href="http://davesquared.net/2007/07/data-access-guidance-package-dal.html"/>
    <updated>2007-07-12T11:00:00+10:00</updated>
    <id>http://davesquared.net/2007/07/data-access-guidance-package-dal</id>
    <content type="html"><![CDATA[<p>David Hayden has posted about a Guidance Package that does data access layer generation. It's not <a href="http://subsonicproject.com/">SubSonic</a>, but still interesting:</p>


<p> <p><a href="http://davidhayden.com/blog/dave/archive/2007/07/11/DataAccessGuidancePackageCodePlexCodeGeneratingDataAccessLayer.aspx">Data Access Guidance Package on CodePlex - Code Generating a Data Access Layer</a></p></p>
]]></content>
  </entry>
  
</feed>
